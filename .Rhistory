library(usethis)
library(devtools)
install.packages(devtools)
install.packages("devtools")
install_github("earlycapistran/handyFunctions")
library(devtools)
install_github("earlycapistran/handyFunctions")
install_github("earlycapistran/handyFunctions")
library(roxygen2)
roxygenize()
roxygenize
roxygenize()
roxygenize()
roxygenize()
library(devtools)
# =============================================================================
# Save ggplot
# earlyc@stanford.edu - December, 2024
# =============================================================================
#' Saves ggplot objects as .svg at a high resolution
#'
#' @param filename name for the file that will be saved
#' @param plot_object a ggplot object
#' @param path filepath to save the plot
#' @return saves ggplot in chosen location
#'
save_ggplot <- function(filename,
plot_object,
path,
width = 20,
height = 20,
units = "cm",
dpi = 300) {
# Load the ggplot2 library
library(ggplot2)
# Save the boxplot as an image file
ggsave(filename,
plot_object,
width = width,
height = height,
units = units,
dpi = dpi,
path = path)
}
devtools::load_all(save_ggplot)
# =============================================================================
# Save ggplot
# earlyc@stanford.edu - December, 2024
# =============================================================================
#' Saves ggplot objects as .svg at a high resolution
#'
#' @param filename name for the file that will be saved
#' @param plot_object a ggplot object
#' @param path filepath to save the plot
#' @param width Width of the saved plot
#' @param height Height of the saved plot
#' @param units Units for width and height
#' @param dpi Dots per inch for the saved plot
#' @return saves ggplot in chosen location
#'
save_ggplot <- function(filename,
plot_object,
path,
width = 20,
height = 20,
units = "cm",
dpi = 300) {
# Load the ggplot2 library
library(ggplot2)
# Ensure 'path' is a valid directory
if (!dir.exists(path)) {
stop("The provided path does not exist.")
}
# Ensure 'filename' ends with .svg
if (tools::file_ext(filename) != "svg") {
stop("The filename must have a .svg extension.")
}
# Ensure 'plot_object' is a ggplot object
if (!inherits(plot_object, "ggplot")) {
stop("The plot_object must be a ggplot object.")
}
# Save the plot as an image file
ggsave(filename = filename,
plot = plot_object,
width = width,
height = height,
units = units,
dpi = dpi,
path = path)
}
devtools::load_all(save_ggplot)
#' Saves ggplot objects as .svg at a high resolution
#'
#' @param filename name for the file that will be saved
#' @param plot_object a ggplot object
#' @param path filepath to save the plot
#' @param width Width of the saved plot
#' @param height Height of the saved plot
#' @param units Units for width and height
#' @param dpi Dots per inch for the saved plot
#' @return saves ggplot in chosen location
#'
save_ggplot <- function(filename,
plot_object,
path,
width = 20,
height = 20,
units = "cm",
dpi = 300) {
# Load the ggplot2 library
library(ggplot2)
# Check the provided path argument
print(paste("Provided path:", path))
# Ensure 'path' is a valid directory
if (!dir.exists(path)) {
stop("The provided path does not exist.")
}
# Ensure 'filename' ends with .svg
if (tools::file_ext(filename) != "svg") {
stop("The filename must have a .svg extension.")
}
# Ensure 'plot_object' is a ggplot object
if (!inherits(plot_object, "ggplot")) {
stop("The plot_object must be a ggplot object.")
}
# Construct the full file path
full_path <- file.path(path, filename)
print(paste("Saving to:", full_path))
# Save the plot as an image file
ggsave(filename = full_path,
plot = plot_object,
width = width,
height = height,
units = units,
dpi = dpi)
}
devtools::load_all(save_ggplot)
.Last.error
# =============================================================================
# Save ggplot
# earlyc@stanford.edu - December, 2024
# =============================================================================
library(ggplot2)
#' Saves ggplot objects as .svg at a high resolution
#'
#' @param filename name for the file that will be saved
#' @param plot_object a ggplot object
#' @param path filepath to save the plot
#' @param width Width of the saved plot
#' @param height Height of the saved plot
#' @param units Units for width and height
#' @param dpi Dots per inch for the saved plot
#' @return saves ggplot in chosen location
save_ggplot <- function(filename,
plot_object,
path,
width = 20,
height = 20,
units = "cm",
dpi = 300) {
# Load the ggplot2 library
library(ggplot2)
# Debug information
print(paste("save_ggplot called with:", filename, path))
# Ensure path is a character
if (!is.character(path)) {
stop("The 'path' argument must be a character string.")
}
# Ensure path does not end with a slash
if (substr(path, nchar(path), nchar(path)) == "/" || substr(path, nchar(path), nchar(path)) == "\\") {
path <- substr(path, 1, nchar(path) - 1)
}
# Error handling for invalid path
normalized_path <- tryCatch(
{
normalizePath(path, mustWork = TRUE)
},
error = function(e) {
stop("Invalid path provided: ", e$message)
}
)
# Ensure filename ends with .svg
if (tools::file_ext(filename) != "svg") {
stop("The filename must have a .svg extension.")
}
# Ensure plot_object is a ggplot object
if (!inherits(plot_object, "ggplot")) {
stop("The plot_object must be a ggplot object.")
}
# Full file path for saving
full_path <- file.path(normalized_path, filename)
print(paste("Saving plot to:", full_path))
# Save the plot as an image file
ggsave(
filename = full_path,
plot = plot_object,
width = width,
height = height,
units = units,
dpi = dpi
)
}
devtools::load_all(save_ggplot)
# =============================================================================
# Save ggplot
# earlyc@stanford.edu - December, 2024
# =============================================================================
#' Saves ggplot objects as .svg at a high resolution
#'
#' @param filename name for the file that will be saved
#' @param plot_object a ggplot object
#' @param path filepath to save file
#' @return saves ggplot in chosen location
#'
save_ggplot <- function(filename,
plot_object,
path,
width = 20,
height = 20,
units = "cm",
dpi = 300) {
# Save the boxplot as an image file
ggsave(filename,
plot_object,
width = width,
height = height,
units = units,
dpi = dpi,
path = path)
}
devtools::load_all(save_ggplot)
# =============================================================================
# Residual analysis for GLM models
# earlyc@stanford.edu - March, 2023
# =============================================================================
#' This function evaluates residuals from 'glm' model objects. It returns
#' a normality plot, residuals vs. fitted, and a lag-plot with a trend line
#' (glm(residual ~ residual -1)) to evaluate autocorrelation. It also
#' provides a Shapiro-Wilk normality test, Levene test for homogeneity of
#' variance, a Runs test for randomness, and a t-test for mean zero.
#'
#' @param glm_object A glm model object
#' @return Residual plots: normality, residuals vs. fitted data, ACF plot
#'
#' Residual tests: Mean zero, Shapiro-Wilk normality test, Levene Test for
#' homogeneity of variance, and Ljung-Box test for autocorrelation
#'
#' @export
#'
#' @usage
#' analyse_glm_residuals(glm_object)
#'
#' @importFrom magrittr %>%
#' @importFrom car leveneTest
#' @importFrom DescTools RunsTest
#' @importFrom stats dt
#' @importFrom stats residuals
#' @importFrom stats fitted
#' @importFrom stats shapiro.test
#' @importFrom stats sd
#' @importFrom stats qqnorm
#' @importFrom stats qqline
#' @importFrom broom glance
#' @importFrom graphics abline
#' @importFrom graphics par
# .............................................................................
# analyseGlmResiduals
# .............................................................................
# To run this function, you must have car, and DescTools installed
analyse_glm_residuals <- function(glm_object) {
library(broom)
# Load and prepare data -----------------------------------------------------
resi <- glm_object$residuals
resDf <- as.data.frame(resi)
fit <- glm_object$fitted.values
# Subset residuals by sign
resDf$sign <- as.factor(ifelse(resDf < 0,
"negative",
"positive"))
# Make plots ----------------------------------------------------------------
par(mar = c(3, 3, 3, 3), mai=c(0.4,0.4,0.4,0.4)) # Adjust margins
# Define layout matrix
mat_layout <- matrix(c(1, 1, 2, 3), 2, 2, byrow = TRUE)
layout(mat_layout)
# Normality Plot in the first row, first column
stats::qqnorm(resDf$resi, cex.main = 0.75)
stats::qqline(resDf$resi)
# Residuals vs Fitted Plot in the second row, first column
graphics::plot(x = fit, y = resi,
xlab = "Fitted values",
ylab = "Residuals",
main = "Residuals versus fitted values",
cex.main = 0.75)
graphics::abline(h=0)
# ACF Plot in the second row, second column
autocorrelation <- stats::acf(glm_object$residuals,
type = "correlation",
main = " ") # Blank default title, NULL doesn't work
title("ACF Plot",
cex.main = 0.75)
# Run tests -----------------------------------------------------------------
norm <- stats::shapiro.test(resDf$resi)
levene <- car::leveneTest(resDf$resi ~ sign, data = resDf)
box <- stats::Box.test(resi, type = "Ljung-Box")
result <- list(normality = norm,
levene = levene,
box = box)
names(result) <- c("Residual Normality Test",
"Levene's Test",
"Ljung-Box Test")
print(result)
# Run t-test for mean = 0 ---------------------------------------------------
stDev <- stats::sd(resDf$resi)
mean <- mean(resDf$resi)
degF <- broom::glance(glm_object)$df.null
t.value  <- abs(mean/stDev)
p.value <- dt(t.value, df=degF)
tResult <- cbind("Residual mean"=mean, "t-value"=t.value, "p-value"=p.value)
rownames(tResult) <- c("")
cat(paste("$ `t-Test for residual mean zero`", "\n"))
print(tResult)
cat(paste("Alternative hypothesis: true mean is not equal to 0", "\n"))
}
devtools::load_all(analyse_glm_residuals)
.Last.errer
.Last.error
library(devtools)
# =============================================================================
# Residual analysis for GLM models
# earlyc@stanford.edu - March, 2023
# =============================================================================
#' This function evaluates residuals from 'glm' model objects. It returns
#' a normality plot, residuals vs. fitted, and a lag-plot with a trend line
#' (glm(residual ~ residual -1)) to evaluate autocorrelation. It also
#' provides a Shapiro-Wilk normality test, Levene test for homogeneity of
#' variance, a Runs test for randomness, and a t-test for mean zero.
#'
#' @param glm_object A glm model object
#' @return Residual plots: normality, residuals vs. fitted data, ACF plot
#'
#' Residual tests: Mean zero, Shapiro-Wilk normality test, Levene Test for
#' homogeneity of variance, and Ljung-Box test for autocorrelation
#'
#' @export
#'
#' @usage
#' analyse_glm_residuals(glm_object)
#'
#' @importFrom magrittr %>%
#' @importFrom car leveneTest
#' @importFrom DescTools RunsTest
#' @importFrom stats dt
#' @importFrom stats residuals
#' @importFrom stats fitted
#' @importFrom stats shapiro.test
#' @importFrom stats sd
#' @importFrom stats qqnorm
#' @importFrom stats qqline
#' @importFrom broom glance
#' @importFrom graphics abline
#' @importFrom graphics par
# .............................................................................
# analyseGlmResiduals
# .............................................................................
# To run this function, you must have car, and DescTools installed
analyse_glm_residuals <- function(glm_object) {
library(broom)
# Load and prepare data -----------------------------------------------------
resi <- glm_object$residuals
resDf <- as.data.frame(resi)
fit <- glm_object$fitted.values
# Subset residuals by sign
resDf$sign <- as.factor(ifelse(resDf < 0,
"negative",
"positive"))
# Make plots ----------------------------------------------------------------
par(mar = c(3, 3, 3, 3), mai=c(0.4,0.4,0.4,0.4)) # Adjust margins
# Define layout matrix
mat_layout <- matrix(c(1, 1, 2, 3), 2, 2, byrow = TRUE)
layout(mat_layout)
# Normality Plot in the first row, first column
stats::qqnorm(resDf$resi, cex.main = 0.75)
stats::qqline(resDf$resi)
# Residuals vs Fitted Plot in the second row, first column
graphics::plot(x = fit, y = resi,
xlab = "Fitted values",
ylab = "Residuals",
main = "Residuals versus fitted values",
cex.main = 0.75)
graphics::abline(h=0)
# ACF Plot in the second row, second column
autocorrelation <- stats::acf(glm_object$residuals,
type = "correlation",
main = " ") # Blank default title, NULL doesn't work
title("ACF Plot",
cex.main = 0.75)
# Run tests -----------------------------------------------------------------
norm <- stats::shapiro.test(resDf$resi)
levene <- car::leveneTest(resDf$resi ~ sign, data = resDf)
box <- stats::Box.test(resi, type = "Ljung-Box")
result <- list(normality = norm,
levene = levene,
box = box)
names(result) <- c("Residual Normality Test",
"Levene's Test",
"Ljung-Box Test")
print(result)
# Run t-test for mean = 0 ---------------------------------------------------
stDev <- stats::sd(resDf$resi)
mean <- mean(resDf$resi)
degF <- broom::glance(glm_object)$df.null
t.value  <- abs(mean/stDev)
p.value <- dt(t.value, df=degF)
tResult <- cbind("Residual mean"=mean, "t-value"=t.value, "p-value"=p.value)
rownames(tResult) <- c("")
cat(paste("$ `t-Test for residual mean zero`", "\n"))
print(tResult)
cat(paste("Alternative hypothesis: true mean is not equal to 0", "\n"))
}
devtools::load_all(analyse_glm_residuals)
devtools::load_all(analyse_glm_residuals())
devtools::load_all(analyse_glm_residuals
devtools::load_all(analyse_glm_residuals)
path.expand("~")
normalizePath()
print(getwd())
setwd(tempdir())
library(devtools)
# Create a new package directory
create("testPackage")
# Navigate to the package directory
setwd("testPackage")
# Use create a new dummy function
use_r("dummy_function")
# Edit the dummy function file with a simple function
# to ensure we understand the context better
cat("
dummy_function <- function() {
print('Hello World')
}
", file = "R/dummy_function.R")
# Use load_all to load the new simple function
load_all(".")
# Call the function to ensure it works
dummy_function()
devtools::load_all(dummy_function())
devtools::load_all(dummy_function)
library(devtools)
# Create a new package directory
create("testPackage")
R.version.string
library(roxygen2)
roxygenize()
